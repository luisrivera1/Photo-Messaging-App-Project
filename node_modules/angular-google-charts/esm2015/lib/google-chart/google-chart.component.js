/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/// <reference types="google.visualization"/>
/// <reference types="google.visualization"/>
import { Component, ElementRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { ScriptLoaderService } from '../script-loader/script-loader.service';
import { RawChartComponent } from '../raw-chart/raw-chart.component';
export class GoogleChartComponent extends RawChartComponent {
    /**
     * @param {?} element
     * @param {?} loaderService
     */
    constructor(element, loaderService) {
        super(element, loaderService);
        this.roles = new Array();
        this.width = undefined;
        this.height = undefined;
        this.options = {};
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.type == null) {
            throw new Error('Can\'t create a Google Chart without specifying a type!');
        }
        if (this.data == null) {
            throw new Error('Can\'t create a Google Chart without data!');
        }
        this.chartData = {
            chartType: this.type
        };
        this.loaderService.onReady.subscribe(() => {
            this.createChart();
        });
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (this.wrapper) {
            this.chartData = {
                chartType: this.type,
                dataTable: this.getDataTable(),
                options: this.parseOptions()
            };
        }
        super.ngOnChanges();
    }
    /**
     * @protected
     * @return {?}
     */
    parseOptions() {
        return Object.assign({ title: this.title, width: this.width, height: this.height }, this.options);
    }
    /**
     * @protected
     * @return {?}
     */
    createChart() {
        this.loadNeededPackages().subscribe(() => {
            this.chartData = {
                chartType: this.type,
                dataTable: this.getDataTable(),
                options: this.parseOptions()
            };
            this.wrapper = new google.visualization.ChartWrapper();
            this.updateChart();
        });
    }
    /**
     * @protected
     * @return {?}
     */
    getDataTable() {
        if (this.columnNames) {
            /** @type {?} */
            const columns = this.parseRoles(this.columnNames);
            this.firstRowIsData = false;
            return [columns, ...this.data];
        }
        else {
            this.firstRowIsData = true;
            return this.data;
        }
    }
    /**
     * @private
     * @param {?} columnNames
     * @return {?}
     */
    parseRoles(columnNames) {
        /** @type {?} */
        const columnNamesWithRoles = columnNames.slice();
        if (this.roles) {
            // Roles must be copied to avoid modifying the index everytime there's a change from ngOnChanges.
            /** @type {?} */
            const copyRoles = this.roles.map(role => Object.assign({}, role));
            copyRoles.forEach(role => {
                /** @type {?} */
                const roleData = {
                    type: role.type,
                    role: role.role
                };
                if (role.p) {
                    roleData.p = role.p;
                }
                if (role.index != null) {
                    columnNamesWithRoles.splice(role.index + 1, 0, roleData);
                    for (const otherRole of copyRoles) {
                        if (otherRole === role) {
                            continue;
                        }
                        if (otherRole.index > role.index) {
                            otherRole.index++;
                        }
                    }
                }
                else {
                    columnNamesWithRoles.push(roleData);
                }
            });
        }
        return columnNamesWithRoles;
    }
}
GoogleChartComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'google-chart',
                template: '',
                exportAs: 'google-chart',
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [':host { width: fit-content; display: block; }']
            }] }
];
/** @nocollapse */
GoogleChartComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ScriptLoaderService }
];
GoogleChartComponent.propDecorators = {
    data: [{ type: Input }],
    columnNames: [{ type: Input }],
    roles: [{ type: Input }],
    title: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    options: [{ type: Input }],
    type: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    GoogleChartComponent.prototype.data;
    /** @type {?} */
    GoogleChartComponent.prototype.columnNames;
    /** @type {?} */
    GoogleChartComponent.prototype.roles;
    /** @type {?} */
    GoogleChartComponent.prototype.title;
    /** @type {?} */
    GoogleChartComponent.prototype.width;
    /** @type {?} */
    GoogleChartComponent.prototype.height;
    /** @type {?} */
    GoogleChartComponent.prototype.options;
    /** @type {?} */
    GoogleChartComponent.prototype.type;
}
//# sourceMappingURL=data:application/json;base64,